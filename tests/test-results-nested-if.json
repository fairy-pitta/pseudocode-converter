{"numFailedTestSuites":1,"numFailedTests":1,"numPassedTestSuites":0,"numPassedTests":0,"numPendingTestSuites":0,"numPendingTests":31,"numRuntimeErrorTestSuites":0,"numTodoTests":0,"numTotalTestSuites":1,"numTotalTests":32,"openHandles":[],"snapshot":{"added":0,"didUpdate":false,"failure":false,"filesAdded":0,"filesRemoved":0,"filesRemovedList":[],"filesUnmatched":0,"filesUpdated":0,"matched":0,"total":0,"unchecked":0,"uncheckedKeysByFile":[],"unmatched":0,"updated":0},"startTime":1748877492822,"success":false,"testResults":[{"assertionResults":[{"ancestorTitles":["Python to IGCSE Pseudocode Parser"],"duration":47,"failureDetails":[{"matcherResult":{"actual":["IF x > y THEN","IF x > z THEN","OUTPUT \"x is largest\"","ELSE","OUTPUT \"z is largest\"","ELSE","ENDIF","OUTPUT \"y might be largest\"","ENDIF","ENDIF"],"expected":["IF x > y THEN","IF x > z THEN","OUTPUT \"x is largest\"","ELSE","OUTPUT \"z is largest\"","ENDIF","ELSE","OUTPUT \"y might be largest\"","ENDIF"],"message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoEqual\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // deep equality\u001b[22m\n\n\u001b[32m- Expected  - 1\u001b[39m\n\u001b[31m+ Received  + 2\u001b[39m\n\n\u001b[33m@@ -2,10 +2,11 @@\u001b[39m\n\u001b[2m    \"IF x > y THEN\",\u001b[22m\n\u001b[2m    \"IF x > z THEN\",\u001b[22m\n\u001b[2m    \"OUTPUT \\\"x is largest\\\"\",\u001b[22m\n\u001b[2m    \"ELSE\",\u001b[22m\n\u001b[2m    \"OUTPUT \\\"z is largest\\\"\",\u001b[22m\n\u001b[32m-   \"ENDIF\",\u001b[39m\n\u001b[2m    \"ELSE\",\u001b[22m\n\u001b[31m+   \"ENDIF\",\u001b[39m\n\u001b[2m    \"OUTPUT \\\"y might be largest\\\"\",\u001b[22m\n\u001b[31m+   \"ENDIF\",\u001b[39m\n\u001b[2m    \"ENDIF\",\u001b[22m\n\u001b[2m  ]\u001b[22m","name":"toEqual","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoEqual\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // deep equality\u001b[22m\n\n\u001b[32m- Expected  - 1\u001b[39m\n\u001b[31m+ Received  + 2\u001b[39m\n\n\u001b[33m@@ -2,10 +2,11 @@\u001b[39m\n\u001b[2m    \"IF x > y THEN\",\u001b[22m\n\u001b[2m    \"IF x > z THEN\",\u001b[22m\n\u001b[2m    \"OUTPUT \\\"x is largest\\\"\",\u001b[22m\n\u001b[2m    \"ELSE\",\u001b[22m\n\u001b[2m    \"OUTPUT \\\"z is largest\\\"\",\u001b[22m\n\u001b[32m-   \"ENDIF\",\u001b[39m\n\u001b[2m    \"ELSE\",\u001b[22m\n\u001b[31m+   \"ENDIF\",\u001b[39m\n\u001b[2m    \"OUTPUT \\\"y might be largest\\\"\",\u001b[22m\n\u001b[31m+   \"ENDIF\",\u001b[39m\n\u001b[2m    \"ENDIF\",\u001b[22m\n\u001b[2m  ]\u001b[22m\n    at Object.<anonymous> (/Users/shuna/pseudocode-converter/__tests__/python-igcse-parser.test.ts:108:25)\n    at Promise.then.completed (/Users/shuna/pseudocode-converter/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/Users/shuna/pseudocode-converter/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/Users/shuna/pseudocode-converter/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/Users/shuna/pseudocode-converter/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/Users/shuna/pseudocode-converter/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/Users/shuna/pseudocode-converter/node_modules/jest-circus/build/run.js:121:9)\n    at run (/Users/shuna/pseudocode-converter/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/Users/shuna/pseudocode-converter/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/Users/shuna/pseudocode-converter/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/Users/shuna/pseudocode-converter/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/Users/shuna/pseudocode-converter/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"Python to IGCSE Pseudocode Parser should handle nested if statements","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should handle nested if statements"},{"ancestorTitles":["Python to IGCSE Pseudocode Parser"],"duration":null,"failureDetails":[],"failureMessages":[],"fullName":"Python to IGCSE Pseudocode Parser should handle for loop with range","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"pending","title":"should handle for loop with range"},{"ancestorTitles":["Python to IGCSE Pseudocode Parser"],"duration":null,"failureDetails":[],"failureMessages":[],"fullName":"Python to IGCSE Pseudocode Parser should handle for loop with step","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"pending","title":"should handle for loop with step"},{"ancestorTitles":["Python to IGCSE Pseudocode Parser"],"duration":null,"failureDetails":[],"failureMessages":[],"fullName":"Python to IGCSE Pseudocode Parser should handle for loop with positive step","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"pending","title":"should handle for loop with positive step"},{"ancestorTitles":["Python to IGCSE Pseudocode Parser"],"duration":null,"failureDetails":[],"failureMessages":[],"fullName":"Python to IGCSE Pseudocode Parser should handle for loop over collection","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"pending","title":"should handle for loop over collection"},{"ancestorTitles":["Python to IGCSE Pseudocode Parser"],"duration":null,"failureDetails":[],"failureMessages":[],"fullName":"Python to IGCSE Pseudocode Parser should handle while loop","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"pending","title":"should handle while loop"},{"ancestorTitles":["Python to IGCSE Pseudocode Parser"],"duration":null,"failureDetails":[],"failureMessages":[],"fullName":"Python to IGCSE Pseudocode Parser should handle while loop with complex condition","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"pending","title":"should handle while loop with complex condition"},{"ancestorTitles":["Python to IGCSE Pseudocode Parser"],"duration":null,"failureDetails":[],"failureMessages":[],"fullName":"Python to IGCSE Pseudocode Parser should handle function definition","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"pending","title":"should handle function definition"},{"ancestorTitles":["Python to IGCSE Pseudocode Parser"],"duration":null,"failureDetails":[],"failureMessages":[],"fullName":"Python to IGCSE Pseudocode Parser should handle function with return","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"pending","title":"should handle function with return"},{"ancestorTitles":["Python to IGCSE Pseudocode Parser"],"duration":null,"failureDetails":[],"failureMessages":[],"fullName":"Python to IGCSE Pseudocode Parser should handle function with multiple parameters and types","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"pending","title":"should handle function with multiple parameters and types"},{"ancestorTitles":["Python to IGCSE Pseudocode Parser"],"duration":null,"failureDetails":[],"failureMessages":[],"fullName":"Python to IGCSE Pseudocode Parser should handle function call","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"pending","title":"should handle function call"},{"ancestorTitles":["Python to IGCSE Pseudocode Parser"],"duration":null,"failureDetails":[],"failureMessages":[],"fullName":"Python to IGCSE Pseudocode Parser should handle list declaration and access","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"pending","title":"should handle list declaration and access"},{"ancestorTitles":["Python to IGCSE Pseudocode Parser"],"duration":null,"failureDetails":[],"failureMessages":[],"fullName":"Python to IGCSE Pseudocode Parser should handle list with mixed types","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"pending","title":"should handle list with mixed types"},{"ancestorTitles":["Python to IGCSE Pseudocode Parser"],"duration":null,"failureDetails":[],"failureMessages":[],"fullName":"Python to IGCSE Pseudocode Parser should handle input statements","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"pending","title":"should handle input statements"},{"ancestorTitles":["Python to IGCSE Pseudocode Parser"],"duration":null,"failureDetails":[],"failureMessages":[],"fullName":"Python to IGCSE Pseudocode Parser should handle print statements","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"pending","title":"should handle print statements"},{"ancestorTitles":["Python to IGCSE Pseudocode Parser"],"duration":null,"failureDetails":[],"failureMessages":[],"fullName":"Python to IGCSE Pseudocode Parser should handle comments","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"pending","title":"should handle comments"},{"ancestorTitles":["Python to IGCSE Pseudocode Parser"],"duration":null,"failureDetails":[],"failureMessages":[],"fullName":"Python to IGCSE Pseudocode Parser should handle try-except block","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"pending","title":"should handle try-except block"},{"ancestorTitles":["Python to IGCSE Pseudocode Parser"],"duration":null,"failureDetails":[],"failureMessages":[],"fullName":"Python to IGCSE Pseudocode Parser should handle try-except-finally block","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"pending","title":"should handle try-except-finally block"},{"ancestorTitles":["Python to IGCSE Pseudocode Parser"],"duration":null,"failureDetails":[],"failureMessages":[],"fullName":"Python to IGCSE Pseudocode Parser should handle class definition","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"pending","title":"should handle class definition"},{"ancestorTitles":["Python to IGCSE Pseudocode Parser"],"duration":null,"failureDetails":[],"failureMessages":[],"fullName":"Python to IGCSE Pseudocode Parser should handle class inheritance","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"pending","title":"should handle class inheritance"},{"ancestorTitles":["Python to IGCSE Pseudocode Parser"],"duration":null,"failureDetails":[],"failureMessages":[],"fullName":"Python to IGCSE Pseudocode Parser should handle object instantiation and method calls","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"pending","title":"should handle object instantiation and method calls"},{"ancestorTitles":["Python to IGCSE Pseudocode Parser"],"duration":null,"failureDetails":[],"failureMessages":[],"fullName":"Python to IGCSE Pseudocode Parser should handle file operations","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"pending","title":"should handle file operations"},{"ancestorTitles":["Python to IGCSE Pseudocode Parser"],"duration":null,"failureDetails":[],"failureMessages":[],"fullName":"Python to IGCSE Pseudocode Parser should handle file writing","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"pending","title":"should handle file writing"},{"ancestorTitles":["Python to IGCSE Pseudocode Parser"],"duration":null,"failureDetails":[],"failureMessages":[],"fullName":"Python to IGCSE Pseudocode Parser should handle break and continue in loops","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"pending","title":"should handle break and continue in loops"},{"ancestorTitles":["Python to IGCSE Pseudocode Parser"],"duration":null,"failureDetails":[],"failureMessages":[],"fullName":"Python to IGCSE Pseudocode Parser should handle dictionary operations","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"pending","title":"should handle dictionary operations"},{"ancestorTitles":["Python to IGCSE Pseudocode Parser"],"duration":null,"failureDetails":[],"failureMessages":[],"fullName":"Python to IGCSE Pseudocode Parser should handle complex mathematical expressions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"pending","title":"should handle complex mathematical expressions"},{"ancestorTitles":["Python to IGCSE Pseudocode Parser"],"duration":null,"failureDetails":[],"failureMessages":[],"fullName":"Python to IGCSE Pseudocode Parser should handle multiple variable assignment","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"pending","title":"should handle multiple variable assignment"},{"ancestorTitles":["Python to IGCSE Pseudocode Parser"],"duration":null,"failureDetails":[],"failureMessages":[],"fullName":"Python to IGCSE Pseudocode Parser should handle lambda functions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"pending","title":"should handle lambda functions"},{"ancestorTitles":["Python to IGCSE Pseudocode Parser"],"duration":null,"failureDetails":[],"failureMessages":[],"fullName":"Python to IGCSE Pseudocode Parser should handle list comprehensions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"pending","title":"should handle list comprehensions"},{"ancestorTitles":["Python to IGCSE Pseudocode Parser"],"duration":null,"failureDetails":[],"failureMessages":[],"fullName":"Python to IGCSE Pseudocode Parser should handle string methods","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"pending","title":"should handle string methods"},{"ancestorTitles":["Python to IGCSE Pseudocode Parser"],"duration":null,"failureDetails":[],"failureMessages":[],"fullName":"Python to IGCSE Pseudocode Parser should handle boolean values and operations","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"pending","title":"should handle boolean values and operations"},{"ancestorTitles":["Python to IGCSE Pseudocode Parser"],"duration":null,"failureDetails":[],"failureMessages":[],"fullName":"Python to IGCSE Pseudocode Parser should handle nested loops","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"pending","title":"should handle nested loops"}],"endTime":1748877493092,"message":"\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mPython to IGCSE Pseudocode Parser › should handle nested if statements\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoEqual\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // deep equality\u001b[22m\n\n    \u001b[32m- Expected  - 1\u001b[39m\n    \u001b[31m+ Received  + 2\u001b[39m\n\n    \u001b[33m@@ -2,10 +2,11 @@\u001b[39m\n    \u001b[2m    \"IF x > y THEN\",\u001b[22m\n    \u001b[2m    \"IF x > z THEN\",\u001b[22m\n    \u001b[2m    \"OUTPUT \\\"x is largest\\\"\",\u001b[22m\n    \u001b[2m    \"ELSE\",\u001b[22m\n    \u001b[2m    \"OUTPUT \\\"z is largest\\\"\",\u001b[22m\n    \u001b[32m-   \"ENDIF\",\u001b[39m\n    \u001b[2m    \"ELSE\",\u001b[22m\n    \u001b[31m+   \"ENDIF\",\u001b[39m\n    \u001b[2m    \"OUTPUT \\\"y might be largest\\\"\",\u001b[22m\n    \u001b[31m+   \"ENDIF\",\u001b[39m\n    \u001b[2m    \"ENDIF\",\u001b[22m\n    \u001b[2m  ]\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 106 |\u001b[39m     console\u001b[33m.\u001b[39mlog(\u001b[32m'Actual:'\u001b[39m\u001b[33m,\u001b[39m actualLines)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 107 |\u001b[39m     console\u001b[33m.\u001b[39mlog(\u001b[32m'Expected:'\u001b[39m\u001b[33m,\u001b[39m expectedLines)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 108 |\u001b[39m     expect(actualLines)\u001b[33m.\u001b[39mtoEqual(expectedLines)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                         \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 109 |\u001b[39m   })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 110 |\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 111 |\u001b[39m   \u001b[90m// 8. FOR Loops\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36m__tests__/python-igcse-parser.test.ts\u001b[39m\u001b[0m\u001b[2m:108:25)\u001b[22m\u001b[2m\u001b[22m\n","name":"/Users/shuna/pseudocode-converter/__tests__/python-igcse-parser.test.ts","startTime":1748877492922,"status":"failed","summary":""}],"wasInterrupted":false}
